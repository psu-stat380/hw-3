---
title: "Homework 3"
author: "[Zach Lees]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: pdf
# format: pdf
---

[Link to the Github repository](https://github.com/psu-stat380/hw-3)

---

::: {.callout-important style="font-size: 0.8em;"}
## Due: Thu, Mar 2, 2023 @ 11:59pm

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:



```R
library(tidyverse)
library(corrplot)
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
library(stringr)
library(broom)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.

```R
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"



df1 <- read_delim(url1, delim = ";", escape_double = FALSE, trim_ws = TRUE)
df2 <- read_delim(url2, delim = ";", escape_double = FALSE, trim_ws = TRUE)
```

---

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
1. Rename the columns of `df` to replace spaces with underscores
1. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
1. Convert the `type` column to a factor
1. Remove rows (if any) with missing values.


```R
df1 <- add_column(df1, type = "white", .after = 1)
df2 <- add_column(df2, type = "red", .after = 1)

df <-  rbind(df1, df2)
```
```{R}
df1$type <- "white"
df2$type <- "red"

df <- rbind(df1, df2)

colnames(df) <- gsub(" ", "_", colnames(df))
df <- select(df, -fixed_acidity, -free_sulfur_dioxide)
df$type <- as.factor(df$type)
df <- na.omit(df)
```



Your output to `R dim(df)` should be
```
[1] 6497   11
```



---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.


```R
red_mean <- mean(df$quality[df$type == "red"])
white_mean <- mean(df$quality[df$type == "white"])

diff_mean <- red_mean - white_mean

n_red <- sum(df$type == "red")
n_white <- sum(df$type == "white")
red_var <- var(df$quality[df$type == "red"])
white_var <- var(df$quality[df$type == "white"])
sp_squared <- ((n_red - 1) * red_var + (n_white - 1) * white_var) / (n_red + n_white - 2)

t1 <- diff_mean / sqrt(sp_squared * (1/n_red + 1/n_white))
```


---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.

```R
t_test <- t.test(df$quality ~ df$type, var.equal=TRUE)
t2 <- t_test$statistic
```

---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.

```R
fit <- lm(quality ~ type, data = df) # Insert your here
summary(fit)
t3 <- 9.686 # Insert your here
```


---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?

All of the t-values are the same, or roughly the same. This is due to us finding the t-value for the same groups from the same data. 

```R
c(t1, t2, t3) # Insert your code here
```




<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::


---

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?

All of the predictors have low p-values, which means they're likely all significant. typewhite, volatile_acidity, chlorides, total_sulfur_dioxide,  and densityare all negative, meaning as they increase, the quality decreases.

```R
full_model <- lm(quality ~ type + volatile_acidity + citric_acid + residual_sugar + chlorides + total_sulfur_dioxide + density + pH + sulphates + alcohol, data = df)

summary(full_model)
broom::tidy(full_model)
```


---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?

The R-squared value for these two are much lower than the R-squared from the previous question. These both only are mad up of one predictor, while the previous question had many.

```R
model_citric <- lm(quality ~ citric_acid, data = df) # Insert your code here
summary(model_citric)
```

```R
model_sulfur <- lm(quality ~ total_sulfur_dioxide, data = df) # Insert your code here
summary(model_sulfur)
```


---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```R
R <- df %>% 
    keep(is.numeric) %>% 
    cor()
R

corrplot(R, type="upper", order="hclust")

```



---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?

type and density are both above 5, which raises concerns regarding multicollinearity.

```R
vif(full_model)
```



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


---

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R

```R
backward_model <- step(full_model, direction = "backward", scope=formula(full_model))
backward_formula <- formula(backward_model)
```

---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R

```R
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)

library(caret)
forward_model <- step(null_model, direction = "forward", scope=formula(full_model))
forward_formula <- formula(forward_model)
```



---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.

```R
y <- df$quality

X <- make_model_matrix(full_model)

lasso <- cv.glmnet(X, y, alpha = 1)

ridge <- cv.glmnet(X, y, alpha = 0)
```

Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 

```R
par(mfrow=c(1, 2))
plot(lasso)
plot(ridge)
```

---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 

```{R}
lasso_coef <- coef(lasso, s = "lambda.1se")
lasso_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
lasso_coef
lasso_formula <- make_formula(lasso_vars)
```


---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 

```{R}
ridge_coef <- coef(ridge, s = "lambda.1se")
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
ridge_coef
ridge_formula <- make_formula(ridge_vars)

```


---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?

The stepwise selections both had 8 chosen of the 10, and they clearly stop once the AIC stops going down. Lasso only has 4 predictors and ridge has all 10 predictors. Lasso has alpha = 1, while ridge has alpha = 0. Lasso seems good for if we wanted as few predictors as possible.





<br><br><br><br>
<br><br><br><br>
---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---

###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ coavriates as possible predictors? Justify your answer. 
10!, since order doesn't matter. And for 2 covariates, we get 1, 1, and 1, which is 3, which is 2!.

---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```R
x_vars <- colnames(df %>% select(-quality))
```

Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.

```R
formulas <- map(
  1:length(x_vars),
  function(x) {
    vars <- combn(x_vars, x, simplify = FALSE)
    map(vars, make_formula, .progress = FALSE)
  }
) %>% unlist()


```

If your code is right the following command should return something along the lines of:

```R
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"
# [2] "quality ~ citric_acid"
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"
```

---

###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.

```R
formulas <- map(
  1:length(x_vars),
  function(x) {
    vars <- combn(x_vars, x, simplify = FALSE)
    map(vars, make_formula, .progress = FALSE)
  }
) %>% unlist()

models <- map(formulas, ~lm(.x, data = df))
summaries <- map(models, broom::glance) %>% bind_rows()
```



---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.

```R
rsq <- summaries$adj.r.squared
max_index <- which.max(rsq)
```

Store resulting formula as a variable called `rsq_formula`.

```R
rsq_formula <- formulas[max_index]
rsq_formula

```

---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.


```R
AIC <- summaries$AIC
```

Store resulting formula as a variable called `aic_formula`.


```R
AIC_formula <- formulas[[which.min(AIC)]] # Insert your code
```

---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.

```R
null_model <- lm(quality ~ 1, df)
full_model <- lm(quality ~ ., df)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  AIC_formula
)
```

* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?
aic_formula has the expected model we've seen in class, while the rsq_formula has all 10 variables. This is due to the fact that as each predictor is added, the R-squared value always increases or at least never decreases. 

* Which of these is more reliable? Why? 
The AIC formula is more reliable, it excludes useless predictors from our model, thus making a better model. rsq formula will include some predictors that take away from the strength of our other predictors.

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?
I would either use the aic_formula, or the lasso_formula. The aic simply makes a good model; however, the lasso formula likely is more useful in this situation. Lasso tends to grab the fewest predictors that work well, which would be very helpful given we have 10,000 columns.

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.

```R
summary_table <- map(
  final_formulas, 
  ~ glance(lm(.x, data = df)) %>% 
    select(sigma, adj.r.squared, AIC, df, p.value) %>% 
    set_names(c("Sigma", "Adj. R-squared", "AIC", "df", "p-value"))
) %>% 
  bind_rows()

summary_table %>% knitr::kable()

```





:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix


#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x` and outputs a `formula` object with `quality` as the response variable and the columns of `x` as the covariates. 

```R
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and outputs a **rescaled** model matrix `X` in a format amenable for `glmnet()`

```R
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```




::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
